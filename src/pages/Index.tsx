import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';

interface GameResult {
  id: string;
  game: string;
  result: string;
  probability: number;
  timestamp: Date;
  payout: number;
  bet: number;
  tokensWon: number;
}

interface Statistics {
  totalGames: number;
  winRate: number;
  averagePayout: number;
  mostPlayed: string;
}

const Index = () => {
  const [gameHistory, setGameHistory] = useState<GameResult[]>([]);
  const [stats, setStats] = useState<Statistics>({
    totalGames: 0,
    winRate: 0,
    averagePayout: 0,
    mostPlayed: '–†—É–ª–µ—Ç–∫–∞'
  });
  const [isSpinning, setIsSpinning] = useState(false);
  const [currentResult, setCurrentResult] = useState<string>('');
  const [tokens, setTokens] = useState<number>(() => {
    const saved = localStorage.getItem('casino-tokens');
    return saved ? parseInt(saved) : 100;
  });
  const [currentBet, setCurrentBet] = useState<number>(10);
  const [lastWin, setLastWin] = useState<number>(0);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  useEffect(() => {
    localStorage.setItem('casino-tokens', tokens.toString());
  }, [tokens]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
  const canPlaceBet = (betAmount: number) => {
    return tokens >= betAmount && betAmount > 0;
  };

  // –°–∏–º—É–ª—è—Ç–æ—Ä —Ä—É–ª–µ—Ç–∫–∏
  const spinRoulette = () => {
    if (isSpinning || !canPlaceBet(currentBet)) return;
    
    setIsSpinning(true);
    setCurrentResult('–ö—Ä—É—Ç–∏—Ç—Å—è...');
    setTokens(prev => prev - currentBet);
    
    setTimeout(() => {
      const numbers = Array.from({ length: 37 }, (_, i) => i);
      const result = numbers[Math.floor(Math.random() * numbers.length)];
      const color = result === 0 ? 'green' : (result % 2 === 0 ? 'black' : 'red');
      const resultText = `${result} (${color === 'green' ? '–∑–µ–ª—ë–Ω—ã–π' : color === 'red' ? '–∫—Ä–∞—Å–Ω—ã–π' : '—á—ë—Ä–Ω—ã–π'})`;
      
      const probability = result === 0 ? 2.7 : (color === 'red' || color === 'black' ? 48.6 : 0);
      let tokensWon = 0;
      let payout = 0;
      
      if (result === 0) {
        tokensWon = currentBet * 35;
        payout = 35;
      } else if (Math.random() > 0.5) {
        tokensWon = currentBet * 2;
        payout = 2;
      }
      
      setTokens(prev => prev + tokensWon);
      setLastWin(tokensWon);
      
      const newResult: GameResult = {
        id: Date.now().toString(),
        game: '–†—É–ª–µ—Ç–∫–∞',
        result: resultText,
        probability,
        timestamp: new Date(),
        payout,
        bet: currentBet,
        tokensWon
      };
      
      setGameHistory(prev => [newResult, ...prev.slice(0, 9)]);
      setCurrentResult(resultText);
      setIsSpinning(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      updateStats([newResult, ...gameHistory]);
    }, 2000);
  };

  // –°–∏–º—É–ª—è—Ç–æ—Ä –∫–æ—Å—Ç–µ–π
  const rollDice = () => {
    if (!canPlaceBet(currentBet)) return;
    
    setTokens(prev => prev - currentBet);
    
    const dice1 = Math.floor(Math.random() * 6) + 1;
    const dice2 = Math.floor(Math.random() * 6) + 1;
    const sum = dice1 + dice2;
    
    const probabilities: { [key: number]: number } = {
      2: 2.78, 3: 5.56, 4: 8.33, 5: 11.11, 6: 13.89, 7: 16.67,
      8: 13.89, 9: 11.11, 10: 8.33, 11: 5.56, 12: 2.78
    };
    
    let tokensWon = 0;
    let payout = 0;
    
    if (sum === 7) {
      tokensWon = currentBet * 4;
      payout = 4;
    } else if (sum === 2 || sum === 12) {
      tokensWon = currentBet * 30;
      payout = 30;
    }
    
    setTokens(prev => prev + tokensWon);
    setLastWin(tokensWon);
    
    const newResult: GameResult = {
      id: Date.now().toString(),
      game: '–ö–æ—Å—Ç–∏',
      result: `${dice1} + ${dice2} = ${sum}`,
      probability: probabilities[sum],
      timestamp: new Date(),
      payout,
      bet: currentBet,
      tokensWon
    };
    
    setGameHistory(prev => [newResult, ...prev.slice(0, 9)]);
    updateStats([newResult, ...gameHistory]);
  };

  // –°–∏–º—É–ª—è—Ç–æ—Ä –∫–∞—Ä—Ç
  const drawCard = () => {
    if (!canPlaceBet(currentBet)) return;
    
    setTokens(prev => prev - currentBet);
    
    const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
    
    const suit = suits[Math.floor(Math.random() * suits.length)];
    const value = values[Math.floor(Math.random() * values.length)];
    
    const isRed = suit === '‚ô•' || suit === '‚ô¶';
    const probability = isRed ? 50 : 50;
    
    let tokensWon = 0;
    let payout = 0;
    
    if (['J', 'Q', 'K', 'A'].includes(value)) {
      tokensWon = currentBet * 3;
      payout = 3;
    } else {
      tokensWon = currentBet * 1;
      payout = 1;
    }
    
    setTokens(prev => prev + tokensWon);
    setLastWin(tokensWon);
    
    const newResult: GameResult = {
      id: Date.now().toString(),
      game: '–ö–∞—Ä—Ç—ã',
      result: `${value}${suit}`,
      probability,
      timestamp: new Date(),
      payout,
      bet: currentBet,
      tokensWon
    };
    
    setGameHistory(prev => [newResult, ...prev.slice(0, 9)]);
    updateStats([newResult, ...gameHistory]);
  };

  const updateStats = (history: GameResult[]) => {
    if (history.length === 0) return;
    
    const totalGames = history.length;
    const wins = history.filter(game => game.payout > 0).length;
    const winRate = (wins / totalGames) * 100;
    const averagePayout = history.reduce((sum, game) => sum + game.payout, 0) / totalGames;
    
    const gameCounts = history.reduce((counts, game) => {
      counts[game.game] = (counts[game.game] || 0) + 1;
      return counts;
    }, {} as { [key: string]: number });
    
    const mostPlayed = Object.entries(gameCounts).sort(([,a], [,b]) => b - a)[0]?.[0] || '–†—É–ª–µ—Ç–∫–∞';
    
    setStats({
      totalGames,
      winRate,
      averagePayout,
      mostPlayed
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-secondary via-secondary/90 to-primary/20">
      {/* Header */}
      <header className="border-b border-border/20 bg-background/80 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-casino-gold bg-clip-text text-transparent">
              üé∞ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ö–∞–∑–∏–Ω–æ
            </h1>
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 bg-casino-gold/10 border border-casino-gold/20 rounded-lg px-4 py-2">
                <Icon name="Coins" size={20} className="text-casino-gold" />
                <span className="font-bold text-xl">{tokens}</span>
                <span className="text-sm text-muted-foreground">—Ç–æ–∫–µ–Ω–æ–≤</span>
              </div>
              {lastWin > 0 && (
                <Badge className="bg-green-500 animate-pulse">
                  +{lastWin} ü™ô
                </Badge>
              )}
              <Badge variant="outline" className="text-sm">
                –°–∏–º—É–ª—è—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
              </Badge>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h2 className="text-5xl font-bold text-white mb-4">
            –ò–∑—É—á–∞–π—Ç–µ —Ç–µ–æ—Ä–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
          </h2>
          <p className="text-xl text-white/80 mb-6 max-w-2xl mx-auto">
            –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –∫–∞–∑–∏–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä
          </p>
          
          {/* Betting Controls */}
          <Card className="max-w-md mx-auto bg-background/90 backdrop-blur-sm">
            <CardContent className="py-4">
              <div className="flex items-center gap-4">
                <div className="flex-1">
                  <Label htmlFor="bet-amount" className="text-sm font-medium">–°—Ç–∞–≤–∫–∞</Label>
                  <div className="flex items-center gap-2 mt-1">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => setCurrentBet(Math.max(1, currentBet - 5))}
                      disabled={currentBet <= 5}
                    >
                      -5
                    </Button>
                    <Input
                      id="bet-amount"
                      type="number"
                      value={currentBet}
                      onChange={(e) => setCurrentBet(Math.max(1, Math.min(tokens, parseInt(e.target.value) || 1)))}
                      className="text-center"
                      min="1"
                      max={tokens}
                    />
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => setCurrentBet(Math.min(tokens, currentBet + 5))}
                      disabled={currentBet >= tokens}
                    >
                      +5
                    </Button>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => setCurrentBet(Math.min(tokens, 25))}
                    disabled={tokens < 25}
                  >
                    25
                  </Button>
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => setCurrentBet(Math.min(tokens, 50))}
                    disabled={tokens < 50}
                  >
                    50
                  </Button>
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => setCurrentBet(tokens)}
                    disabled={tokens === 0}
                  >
                    –í—Å—ë
                  </Button>
                </div>
              </div>
              {tokens === 0 && (
                <div className="mt-3 text-center">
                  <Button
                    onClick={() => {
                      setTokens(100);
                      setLastWin(0);
                    }}
                    className="bg-green-500 hover:bg-green-600"
                  >
                    –ü–æ–ª—É—á–∏—Ç—å 100 —Ç–æ–∫–µ–Ω–æ–≤ üéÅ
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Game Simulators */}
        <div className="grid md:grid-cols-3 gap-8 mb-12">
          {/* –†—É–ª–µ—Ç–∫–∞ */}
          <Card className="border-casino-gold/20 bg-background/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-105 animate-fade-in">
            <CardHeader className="text-center">
              <CardTitle className="flex items-center justify-center gap-2">
                <span className="text-2xl">üéØ</span>
                –†—É–ª–µ—Ç–∫–∞
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                37 —á–∏—Å–µ–ª, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ = 2.7%
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <div className={`text-6xl font-bold mb-4 transition-all duration-500 ${
                  isSpinning ? 'animate-spin animate-pulse-glow' : 'hover:scale-110'
                }`}>
                  üé∞
                </div>
                <div className="text-lg font-semibold mb-4 min-h-[2rem] animate-scale-in">
                  {currentResult || '–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!'}
                </div>
              </div>
              <Button 
                onClick={spinRoulette} 
                disabled={isSpinning || !canPlaceBet(currentBet)}
                className="w-full bg-primary hover:bg-primary/90 transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-50"
              >
                {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : `–ö—Ä—É—Ç–∏—Ç—å (${currentBet} ü™ô)`}
              </Button>
            </CardContent>
          </Card>

          {/* –ö–æ—Å—Ç–∏ */}
          <Card className="border-casino-gold/20 bg-background/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-105 animate-fade-in">
            <CardHeader className="text-center">
              <CardTitle className="flex items-center justify-center gap-2">
                <span className="text-2xl">üé≤</span>
                –ö–æ—Å—Ç–∏
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                –°—É–º–º–∞ 7 –≤—ã–ø–∞–¥–∞–µ—Ç —á–∞—â–µ –≤—Å–µ–≥–æ (16.67% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <div className="text-6xl font-bold mb-4 hover:scale-110 transition-transform duration-200">
                  üé≤üé≤
                </div>
                <div className="text-lg font-semibold mb-4 min-h-[2rem]">
                  –ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç–∏!
                </div>
              </div>
              <Button 
                onClick={rollDice}
                disabled={!canPlaceBet(currentBet)}
                className="w-full bg-casino-gold hover:bg-casino-gold/90 text-white transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-50"
              >
                –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ ({currentBet} ü™ô)
              </Button>
            </CardContent>
          </Card>

          {/* –ö–∞—Ä—Ç—ã */}
          <Card className="border-casino-gold/20 bg-background/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300 hover:scale-105 animate-fade-in">
            <CardHeader className="text-center">
              <CardTitle className="flex items-center justify-center gap-2">
                <span className="text-2xl">üÉè</span>
                –ö–∞—Ä—Ç—ã
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                52 –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π = 1.92%
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <div className="text-6xl font-bold mb-4 hover:scale-110 transition-transform duration-200">
                  üÉè
                </div>
                <div className="text-lg font-semibold mb-4 min-h-[2rem]">
                  –¢—è–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É!
                </div>
              </div>
              <Button 
                onClick={drawCard}
                disabled={!canPlaceBet(currentBet)}
                className="w-full bg-secondary hover:bg-secondary/90 transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-50"
              >
                –¢—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É ({currentBet} ü™ô)
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Analytics Section */}
        <Tabs defaultValue="history" className="mb-8">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="history">–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</TabsTrigger>
            <TabsTrigger value="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</TabsTrigger>
          </TabsList>
          
          <TabsContent value="history">
            <Card className="bg-background/90 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon name="History" size={24} />
                  –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                </CardTitle>
              </CardHeader>
              <CardContent>
                {gameHistory.length === 0 ? (
                  <p className="text-center text-muted-foreground py-8">
                    –°—ã–≥—Ä–∞–π—Ç–µ –≤ –ª—é–±—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                  </p>
                ) : (
                  <div className="space-y-3">
                    {gameHistory.map((game) => (
                      <div 
                        key={game.id} 
                        className="flex items-center justify-between p-3 bg-muted/50 rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <Badge variant="outline">{game.game}</Badge>
                          <span className="font-semibold">{game.result}</span>
                          <span className="text-sm text-muted-foreground">
                            {game.probability.toFixed(1)}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                          </span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            –°—Ç–∞–≤–∫–∞: {game.bet} ü™ô
                          </Badge>
                          {game.tokensWon > 0 ? (
                            <Badge className="bg-green-500">+{game.tokensWon} ü™ô</Badge>
                          ) : (
                            <Badge variant="destructive">-{game.bet} ü™ô</Badge>
                          )}
                          <span className="text-sm text-muted-foreground">
                            {game.timestamp.toLocaleTimeString()}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="analytics">
            <div className="grid md:grid-cols-2 gap-6">
              <Card className="bg-background/90 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="BarChart3" size={24} />
                    –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>–í—Å–µ–≥–æ –∏–≥—Ä:</span>
                      <span className="font-bold">{stats.totalGames}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</span>
                      <span className="font-bold text-green-500">{stats.winRate.toFixed(1)}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à:</span>
                      <span className="font-bold">{stats.averagePayout.toFixed(2)}x</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–≥—Ä–∞:</span>
                      <span className="font-bold">{stats.mostPlayed}</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è</span>
                      <span>{Math.min(stats.totalGames * 10, 100)}%</span>
                    </div>
                    <Progress value={Math.min(stats.totalGames * 10, 100)} className="h-2" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-background/90 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="TrendingUp" size={24} />
                    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <p className="text-sm">
                        <strong>–†—É–ª–µ—Ç–∫–∞:</strong> –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ = -2.7%
                      </p>
                    </div>
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-sm">
                        <strong>–ö–æ—Å—Ç–∏:</strong> –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏
                      </p>
                    </div>
                    <div className="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                      <p className="text-sm">
                        <strong>–ö–∞—Ä—Ç—ã:</strong> –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Ä–∞–≤–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                      </p>
                    </div>
                    <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                      <p className="text-sm">
                        <strong>–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª:</strong> –ß–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä, —Ç–µ–º –±–ª–∏–∂–µ –∫ —Ç–µ–æ—Ä–∏–∏
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* Educational Footer */}
        <Card className="bg-gradient-to-r from-primary/10 to-casino-gold/10 border-casino-gold/20">
          <CardContent className="py-8 text-center">
            <h3 className="text-2xl font-bold mb-4">üéì –û–±—É—á–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ</h3>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              –≠—Ç–æ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π 
              –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –†–µ–∞–ª—å–Ω—ã–µ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Index;